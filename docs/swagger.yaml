openapi: 3.0.2
info:
  title: Films API
  version: 1.0.0
  description: API for managing movies.
paths:
  /movies:
    get:
      summary: Get all movies
      description: Retrieve a list of all movies.
      tags:
        - movies
      responses:
        '200':
          description: A list of movies.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The unique identifier of the movie.
                    name:
                      type: string
                      description: The name of the movie.
                    price:
                      type: number
                      format: float
                      description: The price of the movie.
              example:
                - id: 1
                  name: "The Matrix"
                  price: 12.99
                - id: 2
                  name: "Inception"
                  price: 15.49
    post:
      summary: Add a new movie
      description: Creates a new movie with the provided name and price.
      tags:
        - new-movie
      requestBody:
        required: true
        description: A new movie to be created.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the movie.
                price:
                  type: number
                  format: float
                  description: The price of the movie.
              required:
                - name
                - price
            example:
              name: "Tetris"
              price: 0.99
      responses:
        '201':
          description: Movie successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The unique identifier of the created movie.
                  name:
                    type: string
                    description: The name of the movie.
                  price:
                    type: number
                    format: float
                    description: The price of the movie.
              example:
                id: 3
                name: "Tetris"
                price: 0.99
        '400':
          description: One or all parameters are missing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Name and price are required."
  /movies/{id}:
    get:
      summary: Get a movie by ID
      description: Retrieve the details of a movie by its unique ID.
      tags:
        - movies
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the movie.
          schema:
            type: integer
      responses:
        '200':
          description: Details of the requested movie.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  price:
                    type: number
                    format: float
              example:
                id: 1
                name: "The Matrix"
                price: 12.99
        '404':
          description: Movie not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Movie not found."
    delete:
      summary: Delete a movie by ID
      description: Deletes a movie by its unique ID.
      tags:
        - delete-movie
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the movie to delete.
          schema:
            type: integer
      responses:
        '204':
          description: Movie successfully deleted.
        '404':
          description: Movie not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Movie not found."